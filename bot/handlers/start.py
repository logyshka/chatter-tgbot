import datetime
import re
import time



from loader import dp, Message, CallbackQuery, User, IsUnbanned, rules_link, ContainerSubscriptions, Bill, IsAdmin, FSMContext
from bot.keyboards import main_menu, choosing_gender, cabinet, subscription, buy_subscription, close
from bot.states import PromocodeActivity

@dp.message_handler(commands=["start"])
async def START(message: Message):
    user = User(message.from_user.id)
    if re.search(r"/start \d+", message.text):
        if user.refer == 0:
            user = User(message.from_user.id)
            owner = User(re.findall(r"/start (\d+)", message.text)[0])
            if owner.id != user.id:
                owner.get_subscription(1)
                user.set_refer(owner.id)
                user.get_subscription(1)
                await dp.bot.send_message(chat_id=owner.id,
                                          text=f"<i>ü•≥ <code>@{message.from_user.username}</code> –ø–µ—Ä–µ—à—ë–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!</i>\n\n"
                                               f"<b>üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è <code>{owner.subscription}</code></b>")
                await message.answer(text=f"<i>ü•≥ <code>@{message.from_user.username}</code>, –≤—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –ø–æ—ç—Ç–æ–º—É –ø–æ–ª—É—á–∞–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–µ–Ω—å!</i>\n\n"
                                          f"<b>üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è <code>{user.subscription}</code></b>")
    if user.gender == "unknown":
        await message.answer(text="<i>‚ö† –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª</i>",
                             reply_markup=choosing_gender)
    else:
        await message.answer(f"<i>üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.full_name}</i>\n\n"
                             f"<i>‚ö† –ü—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, —É—á—Ç–∏, —á—Ç–æ —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å <a href='{rules_link}'>–ø—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞</a></i>\n\n"
                             f"<b>ü•≥ –ù—É –∞ —Ç–µ–ø–µ—Ä—å, –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è <a href='{rules_link}'>–ø—Ä–∞–≤–∏–ª –±–æ—Ç–∞</a>, —Ç—ã –º–æ–∂–µ—à—å —Å–º–µ–ª–æ –ø–∏—Å–∞—Ç—å /find –∏–ª–∏ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –æ–±—â–∞—Ç—å—Å—è</b>\n\n"
                             f"<b>‚ô• –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è</b>", reply_markup=main_menu)
    await message.delete()


@dp.callback_query_handler(lambda call: IsUnbanned(call)() and "choose_gender_" in call.data)
async def CHOOSE_GENDER(call: CallbackQuery):
    gender = call.data.replace("choose_gender_", "")
    user = User(call.from_user.id)
    if user.gender == "unknown":
        user.set_gender(gender=gender)
        await call.message.answer(f"<i>üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {call.from_user.full_name}</i>\n\n"
                                  f"<i>‚ö† –ü—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, —É—á—Ç–∏, —á—Ç–æ —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å <a href='{rules_link}'>–ø—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞</a></i>\n\n"
                                  f"<b>ü•≥ –ù—É –∞ —Ç–µ–ø–µ—Ä—å, –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è <a href='{rules_link}'>–ø—Ä–∞–≤–∏–ª –±–æ—Ç–∞</a>, —Ç—ã –º–æ–∂–µ—à—å —Å–º–µ–ª–æ –ø–∏—Å–∞—Ç—å /find –∏–ª–∏ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –æ–±—â–∞—Ç—å—Å—è</b>\n\n"
                                  f"<b>‚ô• –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è</b>", reply_markup=main_menu)
        await call.message.delete()
    elif user.gender == gender:
        await call.answer("‚ö† –£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —ç—Ç–æ—Ç –ø–æ–ª!", show_alert=True)
    else:
        user.set_gender(gender=gender)
        await call.message.edit_reply_markup(reply_markup=cabinet(user.gender))


@dp.message_handler(lambda message: IsUnbanned(message)() and message.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def CABINET(message: Message):
    user = User(message.from_user.id)
    subscription_info = f"<i>üíé –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ <code>{user.subscription}</code></i>\n\n" if user.subscription else "<i>‚òπ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏</i>\n\n"
    await message.answer(text=f"<i>üÜî –í–∞—à id <code>[{user.id}]</code></i>\n\n"
                              + subscription_info +
                              f"<i>üìÖ –í—ã –≤ —Å –Ω–∞–º–∏ —Å <code>{user.reg_date}</code></i>\n\n"
                              f"<i>ü•∂ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–∞–Ω–æ–≤</i> <code>[{user.warnings - 1}]</code>\n\n"
                              f"<i>üìä –°–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∞–º:</i>\n\n"
                              f"<i>ü•∞ –õ–∞–π–∫–æ–≤</i> <code>[{user.likes}]</code>\n"
                              f"<i>ü§Æ –î–∏—Å–∫–ª–∞–π–∫–æ–≤</i> <code>[{user.dislikes}]</code>",
                         reply_markup=cabinet(user.gender))
    await message.delete()


@dp.message_handler(lambda message: IsUnbanned(message)() and message.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
async def SUBSCRIPTION(message: Message):
    user = User(message.from_user.id)
    cost_1day = ContainerSubscriptions.get('day').cost
    cost_1week = ContainerSubscriptions.get('week').cost
    benefit_week = round(((7 * cost_1day - cost_1week) / (cost_1day * 7)) * 100)
    cost_1month = ContainerSubscriptions.get('month').cost
    benefit_month = round(((30 * cost_1day - cost_1month) / (cost_1day * 30)) * 100)
    await message.answer(text=f"<i>‚öô –°—É—â–µ—Å—Ç–≤—É–µ—Ç <u>2 —Å–ø–æ—Å–æ–±–∞</u> –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</i>\n\n"
                              f"<b>‚ûñ –ü–æ–∫—É–ø–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É</b>\n\n"
                              f"<i>üí∞ –¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</i>\n\n"
                              f"<i>üòè 1 –¥–µ–Ω—å</i> <code>{cost_1day} RUB</code>\n"
                              f"<i>ü§§ 1 –Ω–µ–¥–µ–ª—è</i> <code>{cost_1week} RUB</code> <b>(<u>–≤—ã–≥–æ–¥–∞ {benefit_week}%</u>)</b>\n"
                              f"<i>üòé 1 –º–µ—Å—è—Ü</i> <code>{cost_1month} RUB</code> <b>(<u>–≤—ã–≥–æ–¥–∞ {benefit_month}%</u>)</b>\n\n"
                              f"<b>‚ûñ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n\n"
                              f"<i>‚ñ´ <u>1 —Ä–µ—Ñ–µ—Ä–∞–ª</u> ‚Üí <u>+1 –¥–µ–Ω—å</u> –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞–º</i>\n"
                              f"<i>‚ñ´ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ ‚Üí <u>+1 –¥–µ–Ω—å</u> –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—É</i>\n"
                              f"<i>‚ñ´ <u>1 –∫—É–ø–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å</u> –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º ‚Üí <u>+3 —á–∞—Å–∞</u> –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞–º</i>\n\n"
                              f"<i>üìé –í–∞—à–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\n\n"
                              f"<i>https://t.me/{(await dp.bot.get_me()).username}?start={user.id}</i>",
                         reply_markup=subscription)
    await message.delete()

@dp.callback_query_handler(lambda call: IsUnbanned(call)() and "buy_sub_" in call.data)
async def BUY_SUB(call: CallbackQuery):
    user = User(call.from_user.id)
    sub = ContainerSubscriptions.get(call.data.replace("buy_sub_", ""))
    start_time = datetime.datetime.now()
    bill = (await Bill.create_bill(sub.cost, user.id, sub.during))
    end_time = start_time + datetime.timedelta(minutes=7)
    if bill:
        message2 = await call.message.answer(
            text=f"<i>‚ö† –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ <code>{sub.cost} RUB</code>, –ø–µ—Ä–µ–π–¥—è –ø–æ <a href='{bill.pay_url}'>—Å—Å—ã–ª–∫–µ</a></i>:\n\n"
                 f"<b>{bill.pay_url}</b>\n\n"
                 f"<i>‚ö† –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—Å—Ç –≤–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É!</i>\n"
                 f"<i>‚ö† –°—á—ë—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ <code>7 –º–∏–Ω—É—Ç</code>!</i>",
            reply_markup=buy_subscription(bill.pay_url, bill.bill_id))
        complete = False
        while start_time < end_time:
            result = await Bill.check_bill(bill.bill_id)
            if result:
                user.get_subscription(result)
                if user.refer != 0:
                    refer = User(user.refer)
                    refer.get_subscription(round(result / 8, 2))
                    try:
                        await dp.bot.send_message(chat_id=user.refer,
                                                  text=f"<i>ü•≥ <code>@{call.from_user.username}</code> –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É!</i>\n\n"
                                                       f"<b>üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è <code>{refer.subscription}</code></b>")
                    except:
                        pass
                await call.message.answer(text="<i>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞!</i>\n\n"
                                               f"<b>üìÖ –û–Ω–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è <code>{user.subscription}</code></b>")
                complete = True
                break
            elif IsAdmin(call)():
                user.get_subscription(await Bill.admin_complete(bill.bill_id))
                await call.message.answer(text="<i>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞!</i>\n\n"
                                               f"<b>üìÖ –û–Ω–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è <code>{user.subscription}</code></b>")
                break
            time.sleep(0.1)
        if not complete:
            await Bill.close_bill(bill.bill_id)
            await call.message.answer(text="<i>‚ö† –°—á—ë—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç!</i>")
        await message2.delete()
    else:
        await call.answer(text="‚ö† –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å—á—ë—Ç\n"
                               "‚ö† –û–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –æ–Ω –∏—Å—Ç–µ—á—ë—Ç (7 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è)",
                          show_alert=True)


@dp.callback_query_handler(lambda call: IsUnbanned(call)() and "close_bill_" in call.data)
async def BUY_SUB(call: CallbackQuery):
    await Bill.close_bill(bill_id=call.data.replace("close_bill_", ""))
    await call.message.delete()


@dp.callback_query_handler(lambda call: IsUnbanned(call)() and "activate_promocode" == call.data)
async def ACTIVATE_PROMOCODE(call: CallbackQuery):
    await PromocodeActivity.activate.set()
    await call.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥!", show_alert=True)


@dp.message_handler(lambda message: IsUnbanned(message)(), state=PromocodeActivity.activate)
async def ACTIVATE_PROMOCODE(message: Message, state=FSMContext):
    await state.finish()
    user = User(message.from_user.id)
    result = user.activate_promocode(message.text)
    if result:
        await message.answer(text=f"<i>ü•≥ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏–ª–∏ <u>{result} —á–∞—Å–æ–≤</u> –ø–æ–¥–ø–∏—Å–∫–∏!</i>\n\n")
    else:
        await message.answer(text=f"<i>‚ö† –ë—ã–ª –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥</i>\n\n",
                             reply_markup=close)
    await message.delete()