import datetime
import re
from loader import dp, Message, CallbackQuery, User, ConversationStatus, UserStatus, ContentTypes, IsUnbanned, \
    Conversation, rules_link
from bot.keyboards import main_menu, close_dialog, close_search, close, report1, report2


@dp.message_handler(lambda message: IsUnbanned(message)(), commands=["link"])
async def LINK(message: Message):
    user = User(message.from_user.id)
    if user.status == UserStatus.BUSY:
        if Conversation(user.conversation_id).start_time + datetime.timedelta(minutes=2) > datetime.datetime.now():
            await message.answer(
                text="<i>‚ö† –°—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–ø—É—Å—Ç—è <u>2 –º–∏–Ω—É—Ç—ã</u> –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞!</i>")
        else:
            await dp.bot.send_message(chat_id=user.interlocutor,
                                      text=f"<i>üë§ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–¥–µ–ª–∏–ª—Å—è <a href='https://t.me/{message.from_user.username}'>—Å—Å—ã–ª–∫–æ–π</a> –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!</i>\n\n"
                                           f"<b>https://t.me/{message.from_user.username}</b>")


@dp.message_handler(lambda message: IsUnbanned(message)()
                                    and (message.text == "/find" or message.text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"),
                    content_types=ContentTypes.TEXT)
async def FIND(message: Message):
    user = User(message.from_user.id)
    if user.status == UserStatus.FREE:
        result = user.start_conversation()
        if result == ConversationStatus.WAITING:
            text = "<i>üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞—á–∞—Ç!</i>"
            await message.answer(text=text, reply_markup=close_search)
        else:
            text = "<i>‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω!</i>\n\n" \
                   "<i>‚óæ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: </i>\n\n" \
                   "<b>‚ûñ /next - —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫</b>\n" \
                   "<b>‚ûñ /stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥</b>\n" \
                   "<b>‚ûñ /link - –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>"
            await dp.bot.send_message(chat_id=user.interlocutor,
                                      text=text,
                                      reply_markup=close_dialog)
            await message.answer(text=text,
                                 reply_markup=close_dialog)


@dp.message_handler(lambda message: IsUnbanned(message)()
                                    and (message.text == "/next" or message.text == "‚ôª –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"),
                    content_types=ContentTypes.TEXT)
async def NEXT(message: Message):
    user = User(message.from_user.id)
    if user.status == UserStatus.BUSY:
        if user.interlocutor:
            text = "<i>üòî –î–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω!</i>\n\n" \
                   "<i>‚óæ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i>\n\n" \
                   "<b>‚ûñ /find - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥</b>"
            text2 = "<i>‚ö† –í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É, –∏–ª–∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–Ω –≤—ë–ª —Å–µ–±—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</i>"
            await dp.bot.send_message(chat_id=user.interlocutor,
                                      text=text,
                                      reply_markup=main_menu)
            await dp.bot.send_message(chat_id=user.interlocutor,
                                      text=text2,
                                      reply_markup=report2(user.id))
            await message.answer(text=text,
                                 reply_markup=main_menu)
            await message.answer(text=text2,
                                 reply_markup=report2(user.interlocutor))
            user.end_conversation()
        else:
            await message.answer(text="<i>‚ö† –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ!</i>\n\n"
                                      "<b>‚ö† –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop –∏–ª–∏ <u>–∫–Ω–æ–ø–∫—É</u></b>",
                                 reply_markup=close_search)

    if user.status == UserStatus.FREE:
        result = user.start_conversation()
        if result == ConversationStatus.WAITING:
            text = "<i>üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞—á–∞—Ç!</i>"
            await message.answer(text=text, reply_markup=close_search)
        else:
            text = "<i>‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω!</i>\n\n" \
                   "<i>‚óæ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: </i>\n\n" \
                   "<b>‚ûñ /next - —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫</b>\n" \
                   "<b>‚ûñ /stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥</b>\n" \
                   "<b>‚ûñ /link - –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>"
            await dp.bot.send_message(chat_id=user.interlocutor,
                                      text=text,
                                      reply_markup=close_dialog)
            await message.answer(text=text,
                                 reply_markup=close_dialog)


@dp.message_handler(lambda message: IsUnbanned(message)()
                                    and (
                                            message.text == "/stop" or message.text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫" or message.text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
                    content_types=ContentTypes.TEXT)
async def STOP(message: Message):
    user = User(message.from_user.id)
    if user.status == UserStatus.FREE:
        await message.answer(text="<i>‚ö† –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ!</i>")
    else:

        if user.interlocutor:
            text = "<i>üòî –î–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω!</i>\n\n" \
                   "<i>‚óæ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i>\n\n" \
                   "<b>‚ûñ /find - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥</b>"
            text2 = "<i>‚ö† –í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É, –∏–ª–∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–Ω –≤—ë–ª —Å–µ–±—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</i>"
            await dp.bot.send_message(chat_id=user.interlocutor,
                                      text=text,
                                      reply_markup=main_menu)
            await dp.bot.send_message(chat_id=user.interlocutor,
                                      text=text2,
                                      reply_markup=report2(user.id))
            await message.answer(text=text,
                                 reply_markup=main_menu)
            await message.answer(text=text2,
                                 reply_markup=report2(user.interlocutor))
        else:
            await message.answer(text="<i>üòî –ü–æ–∏—Å–∫ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω!</i>\n\n"
                                      "<i>‚óæ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i>\n\n"
                                      "<b>‚ûñ /find - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥</b>",
                                 reply_markup=main_menu)
        user.end_conversation()


@dp.message_handler(lambda message: User(message.from_user.id).status == UserStatus.BUSY and IsUnbanned(message)(),
                    content_types=ContentTypes.ANY)
async def CONVERSATION(message: Message):
    user = User(message.from_user.id)
    if message.content_type != ContentTypes.STICKER:
        if message.text:
            search = re.search('(\w+)://([\w\-\._]+)/(\w+).(\w+)', message.text)
            if not search:
                search = "@" in message.text
        elif message.caption:
            search = re.search('(\w+)://([\w\-\._]+)/(\w+).(\w+)', message.caption)
            if not search:
                search = "@" in message.caption
        else:
            search = False
        if search:
            during = round(user.get_warn(1 / 12) * 60, 2)
            await message.answer(text=f"<i>üòî –î–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</i>\n\n"
                                      f"<i>üïó –°—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: <u>{during} –º–∏–Ω—É—Ç</u></i>\n\n"
                                      f"<i>ü§∑‚Äç‚ôÇ –ü—Ä–∏—á–∏–Ω–∞: <u>–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É</u></i>")
            await dp.bot.send_message(chat_id=user.interlocutor,
                                      text=f"<i>üòî –î–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</i>\n\n"
                                           f"<i>üïó –°—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: <u>{during} –º–∏–Ω—É—Ç</u></i>\n\n"
                                           f"<i>ü§∑‚Äç‚ôÇ –ü—Ä–∏—á–∏–Ω–∞: <u>–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É</u></i>")
            user.end_conversation()
        else:
            await message.copy_to(chat_id=user.interlocutor)


@dp.message_handler(lambda message: User(message.from_user.id).status == UserStatus.FREE
                                    and IsUnbanned(message)() and (
                                            message.text == "üìÉ –ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞" or message.text == "/rules"),
                    content_types=ContentTypes.TEXT)
async def RULES(message: Message):
    await message.answer(
        text=f"<i><u>üìÉ –ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞</u> –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏, –ø–µ—Ä–µ–π–¥—è –ø–æ <a href='{rules_link}'>—Å—Å—ã–ª–∫–µ –≤–Ω–∏–∑—É</a></i>\n\n"
             f"<b>{rules_link}</b>",
        reply_markup=close)


@dp.message_handler(lambda message: not IsUnbanned(message)()
                                    and User(
    message.from_user.id).banned_for < datetime.datetime.now() + datetime.timedelta(days=700),
                    content_types=ContentTypes.TEXT)
async def BAN_DESCRIPTION(message: Message):
    user = User(message.from_user.id)
    if not message.from_user.username:
        text = "<i>‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤–∞–º –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ <u>username</u>!</i>\n\n"
    else:
        text = f"<i>‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤–∞–º –¥–æ <u>{user.banned_for.replace(microsecond=0)}</u>!</i>\n\n" \
               f"<i>‚ö† –í–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–æ–±–ª—é–¥–∞–π—Ç–µ <a href='{rules_link}'>–ø—Ä–∞–≤–∏–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ</a></i>"
    await message.answer(text=text)


@dp.callback_query_handler(lambda call: IsUnbanned(call)() and re.search(r"report_menu_\d+", call.data))
async def REPORT_MENU(call: CallbackQuery):
    if "open" in call.data:
        user_id = call.data.replace("open_report_menu_", "")
        await call.message.edit_text(text="<i>‚óæ –û–ø–∏—Å–∞–Ω–∏–µ –∂–∞–ª–æ–±:</i>\n\n"     
                                          "<b>üîû | –ø–æ—à–ª—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫</b>\n" 
                                          "<b>üí∞ | –ø—Ä–æ–¥–∞–∂–∞</b>\n"           
                                          "<b>üì∞ | —Ä–µ–∫–ª–∞–º–∞</b>\n"
                                          "<b>ü§¨ | –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è</b>",
                                     reply_markup=report1(user_id))
    elif "return" in call.data:
        user_id = call.data.replace("return_report_menu_", "")
        text2 = "<i>‚ö† –í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É, –∏–ª–∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–Ω –≤—ë–ª —Å–µ–±—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</i>"
        await call.message.edit_text(text=text2,
                                     reply_markup=report2(user_id))



@dp.callback_query_handler(lambda call: IsUnbanned(call)() and re.search(r"report_\d+_.+$", call.data))
async def REPORT_MENU(call: CallbackQuery):
    method, user_id, reason = call.data.split("_")
    User(user_id).get_report(reason)
    await call.message.answer("<i>‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!</i>\n"
                              "<i>‚ö† –ï—Å–ª–∏ –∂–∞–ª–æ–±–∞ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∞, –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω!</i>",
                              reply_markup=close)
    await call.message.delete()


@dp.callback_query_handler(lambda call: IsUnbanned(call)() and re.search(r"send_like_to_\d+", call.data))
async def SEND_LIKE(call: CallbackQuery):
    user = User(call.data.replace("send_like_to_", ""))
    user.get_like()
    await call.message.answer("<i>‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –ø—Ä–∏–Ω—è—Ç</i>",
                              reply_markup=close)
    await call.message.delete()


@dp.callback_query_handler(lambda call: IsUnbanned(call)() and re.search(r"send_dislike_to_\d+", call.data))
async def SEND_DISLIKE(call: CallbackQuery):
    user = User(call.data.replace("send_dislike_to_", ""))
    user.get_dislike()
    await call.message.answer("<i>‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –ø—Ä–∏–Ω—è—Ç</i>",
                              reply_markup=close)
    await call.message.delete()


@dp.message_handler(
    lambda message: IsUnbanned(message)() and (message.text == "üë©üèº –ü–æ–∏—Å–∫ –ñ" or message.text == "üë®üèº –ü–æ–∏—Å–∫ –ú"))
async def DONATE_SEARCH(message: Message):
    user = User(message.from_user.id)
    if user.subscription:
        excepted_gender = {"üë©üèº –ü–æ–∏—Å–∫ –ñ": "female",
                           "üë®üèº –ü–æ–∏—Å–∫ –ú": "male"}[message.text]
        if user.status == UserStatus.FREE:
            result = user.start_conversation(excepted_gender=excepted_gender)
            if result == ConversationStatus.WAITING:
                text = f"<i>{message.text} –Ω–∞—á–∞—Ç!</i>"
                await message.answer(text=text, reply_markup=close_search)
            else:
                text = "<i>‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω!</i>\n\n" \
                       "<i>‚óæ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: </i>\n\n" \
                       "<b>‚ûñ /next - —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫</b>\n" \
                       "<b>‚ûñ /stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥</b>\n" \
                       "<b>‚ûñ /link - –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>"
                await dp.bot.send_message(chat_id=user.interlocutor,
                                          text=text,
                                          reply_markup=close_dialog)
                await message.answer(text=text,
                                     reply_markup=close_dialog)
    else:
        await message.answer("<i>‚ö† –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞!</i>",
                             reply_markup=close)
